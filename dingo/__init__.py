# dingo : a python library for metabolic networks sampling and analysis
# dingo is part of GeomScale project

# Copyright (c) 2021 Apostolos Chalkis

# Licensed under GNU LGPL.3, see LICENCE file

import numpy as np
import sys
import os
import pickle
from dingo.fva import slow_fva
from dingo.fba import slow_fba
from dingo.loading_models import read_json_file
from dingo.inner_ball import slow_inner_ball
from dingo.nullspace import nullspace_dense, nullspace_sparse
from dingo.scaling import (
    gmscale,
    apply_scaling,
    remove_almost_redundant_facets,
    map_samples_to_steady_states,
)
from dingo.parser import dingo_args
from dingo.pipelines import (
    from_model_to_steady_states_pipeline,
    from_polytope_to_steady_states_pipeline,
)

try:
    import gurobipy
    from dingo.gurobi_based_implementations import fast_fba, fast_fva, fast_inner_ball
except ImportError as e:
    pass

from volestipy import HPolytope


def dingo_main():
    """A function that (a) reads the inputs using argparse package, (b) calls the proper dingo pipeline
    and (c) saves using pickle package the outputs
    """

    args = dingo_args()

    if args.metabolic_network == None and args.polytope == None:
        raise Exception(
            "You have to give as input either a model or a polytope derived from a model."
        )

    if args.output_directory == None:
        output_path_dir = os.getcwd()
    else:
        output_path_dir = args.output_directory

    if os.path.isdir(output_path_dir) == False:
        os.mkdir(output_path_dir)

    # Move to the output directory
    os.chdir(output_path_dir)

    if args.metabolic_network != None:

        result_obj = from_model_to_steady_states_pipeline(args)

        if args.preprocess_only:

            polytope_info = result_obj[:4]
            network_info = result_obj[4:]

            with open("dingo_polytope_output", "wb") as dingo_polytope_file:
                pickle.dump(polytope_info, dingo_polytope_file)

            with open("dingo_minmax_fluxes_output", "wb") as dingo_network_file:
                pickle.dump(network_info, dingo_network_file)

        else:

            polytope_info = result_obj[:7]
            network_info = result_obj[7:]

            with open("dingo_polytope_output", "wb") as dingo_polytope_file:
                pickle.dump(polytope_info, dingo_polytope_file)

            with open("dingo_network_output", "wb") as dingo_network_file:
                pickle.dump(network_info, dingo_network_file)

    else:

        file = open(args.polytope, "rb")
        object_file = pickle.load(file)
        file.close()

        if len(object_file) == 4:
            result_obj = from_polytope_to_steady_states_pipeline(
                args, object_file[0], object_file[1], object_file[2], object_file[3]
            )
        elif len(object_file) == 7:
            result_obj = from_polytope_to_steady_states_pipeline(
                args,
                object_file[0],
                object_file[1],
                object_file[2],
                object_file[3],
                object_file[4],
                object_file[5],
            )
        else:
            raise Exception("The input file has to be generated by dingo package.")

        polytope_info = result_obj[:7]
        network_info = result_obj[7:]

        with open("dingo_rounded_polytope_output", "wb") as dingo_polytope_file:
            pickle.dump(polytope_info, dingo_polytope_file)

        with open("steady_states_from_polytope", "wb") as dingo_network_file:
            pickle.dump(network_info, dingo_network_file)


if __name__ == "__main__":

    dingo_main()
